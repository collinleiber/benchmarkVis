% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tuningPlots.R
\name{createTuningLinePlot}
\alias{createTuningLinePlot}
\title{Create a tuning line plot}
\usage{
createTuningLinePlot(dt, measure, cumulative.function = "min",
  show.histogram = FALSE, tuning.parameter = "none")
}
\arguments{
\item{dt}{compatible data table}

\item{measure}{the column name containing the results of a measure}

\item{cumulative.function}{the cumulative function to use for the measure values (default: "min")}

\item{show.histogram}{shows the histogram of the measure values in the background (default: FALSE)}

\item{tuning.parameter}{the algorithm parameter (default: "none")}
}
\value{
a plotly line plot
}
\description{
This plot is just usable if the algorithm.parameter column contains an iteration value.
Create a plotly line plot out of a benchmarkVis compatible data table.
The created line plot shows the change of the specified measure for each iteration.
A cumulative function can be defined to get a better feeling of the course of the line chart.
Possible parameters for the cumulative function are: "id" (identity function), "min", "max", "mean" - default is min.
If desired a histogram of the measure values can be plotted in the background to easily see the distribution in the data.table.
Additionally a algorithm parameter can be defined to be plotted as circles on top of the line chart.
This way the connection between measure result and parameter can be investigated.
x-Axis: the iteration.
y-Axis: the measure.
y2-Axis (on the right): the optional algorithm parameter
}
\examples{
createTuningLinePlot(mlr.tuning.example, "measure.acc.test.mean", "id", TRUE, "C")
}
